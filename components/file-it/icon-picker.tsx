"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useState } from "react";

// Liste d'√©mojis couramment utilis√©s pour les mati√®res et activit√©s
const COMMON_ICONS = [
  // Mati√®res scolaires
  "üìö",
  "üìò",
  "üìó",
  "üìô",
  "üìï",
  "üìì",
  "üìî",
  "üìí",
  "üìù",
  "‚úèÔ∏è",
  "üìê",
  "üìè",
  "üßÆ",
  "üî¨",
  "üî≠",
  "üß™",
  "üß´",
  "üß¨",
  "üîç",
  "üåç",
  "üåé",
  "üåè",
  "üó∫Ô∏è",
  "üß†",
  "üíª",
  "üñ•Ô∏è",
  "üñ±Ô∏è",
  "‚å®Ô∏è",
  "üé®",
  "üé≠",
  "üé¨",
  "üéµ",
  "üéπ",
  "üé∏",
  "üéª",
  "üé∑",
  "üé∫",
  "ü•Å",
  "üèÄ",
  "‚öΩ",
  "üèà",
  "‚öæ",
  "üéæ",
  "üèê",
  "üèâ",
  "üé±",
  "üèì",
  "üè∏",
  "üèí",
  "üèë",
  "ü•ç",
  "üèè",
  "‚õ≥",
  "ü•ä",
  "ü•ã",
  "ü•Ö",
  "‚õ∏Ô∏è",
  "üé£",
  "ü§ø",
  "üèä‚Äç‚ôÄÔ∏è",
  "üö¥‚Äç‚ôÄÔ∏è",
  "üßó‚Äç‚ôÄÔ∏è",
  "üèÑ‚Äç‚ôÄÔ∏è",
  "üèåÔ∏è‚Äç‚ôÄÔ∏è",
  "üèá",
  "üßò‚Äç‚ôÄÔ∏è",
  "‚õπÔ∏è‚Äç‚ôÄÔ∏è",
  "ü§∏‚Äç‚ôÄÔ∏è",
  "ü§º‚Äç‚ôÄÔ∏è",

  // Activit√©s et loisirs
  "üéÆ",
  "üé≤",
  "üéØ",
  "üé≥",
  "üé™",
  "üé†",
  "üé°",
  "üé¢",
  "üß©",
  "üé∞",
  "üé≠",
  "üé®",
  "üßµ",
  "üß∂",
  "üéπ",
  "üé∑",
  "üé∫",
  "üé∏",
  "üéª",
  "ü•Å",
  "üé¨",
  "üì∑",
  "üì∏",
  "üìπ",
  "üìº",
  "üì∫",
  "üìª",
  "üéß",
  "üì±",
  "üíª",
  "üñ•Ô∏è",
  "üéÆ",
  "üïπÔ∏è",
  "üé≤",
  "üß©",
  "üéØ",
  "üé≥",
  "üé™",
  "üé≠",
  "üé®",
  "üß∂",
  "üßµ",
  "üß∏",
  "ü™Å",
  "ü™Ä",
  "üéà",
  "üéÜ",
  "üéá",
  "üß®",
  "‚ú®",
  "üéâ",
  "üéä",
  "üéé",
  "üéè",
  "üéê",
  "üéë",
  "üéÄ",
  "üéÅ",
  "üéóÔ∏è",
  "üéüÔ∏è",
  "üé´",
  "üéñÔ∏è",
  "üèÜ",
  "üèÖ",
  "ü•á",
  "ü•à",
  "ü•â",
  "‚öΩ",
  "‚öæ",
  "ü•é",
  "üèÄ",
  "üèê",
  "üèà",
  "üèâ",
  "üéæ",
  "ü•è",
  "üé≥",
  "üèè",
  "üèë",
  "üèí",
  "ü•ç",
  "üèì",
  "üè∏",
  "ü•ä",
  "ü•ã",
  "ü•Ö",
  "‚õ≥",
  "‚õ∏Ô∏è",
  "üé£",
  "ü§ø",
  "üéΩ",
  "üéø",
  "üõ∑",
  "ü•å",
  "üéØ",
  "ü™Ä",
  "ü™Å",
  "üé±",
  "üîÆ",
  "üßø",
  "üéÆ",
  "üïπÔ∏è",
  "üé∞",
  "üé≤",
  "üß©",
  "üß∏",
  "‚ôüÔ∏è",
  "üé≠",
  "üñºÔ∏è",
  "üé®",
  "üßµ",
  "üß∂",
  "üëæ",
  "ü¶∫",
  "ü•Ω",
  "ü•º",
  "üß•",
  "üëî",
  "üëï",
  "üëñ",
  "üß£",
  "üß§",
  "üß¶",
  "üëó",
  "üëò",
  "ü•ª",
  "ü©±",
  "ü©≤",
  "ü©≥",
  "üëô",
  "üëö",
  "üëõ",
  "üëú",
  "üëù",
  "üõçÔ∏è",
  "üéí",
  "üëû",
  "üëü",
  "ü•æ",
  "ü•ø",
  "üë†",
  "üë°",
  "ü©∞",
  "üë¢",
  "üëë",
  "üëí",
  "üé©",
  "üéì",
  "üß¢",
  "‚õëÔ∏è",
  "üíÑ",
  "üíç",
  "üíº",
];

type IconPickerProps = {
  selectedIcon: string;
  onSelectIcon: (icon: string) => void;
  onClose: () => void;
};

export function IconPicker({
  selectedIcon,
  onSelectIcon,
  onClose,
}: IconPickerProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [currentIcon, setCurrentIcon] = useState(selectedIcon);

  const filteredIcons = searchTerm
    ? COMMON_ICONS.filter(
        (icon) =>
          // Simple filtering based on emoji description would require a library
          // For now, we'll just show all icons when searching
          true
      )
    : COMMON_ICONS;

  const handleIconSelect = (icon: string) => {
    setCurrentIcon(icon);
  };

  const handleApply = () => {
    onSelectIcon(currentIcon);
    onClose();
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-sm font-medium">Choisir une ic√¥ne</h3>
        <div className="w-8 h-8 flex items-center justify-center text-xl border rounded">
          {currentIcon}
        </div>
      </div>

      <Input
        placeholder="Rechercher une ic√¥ne..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-2"
      />

      <ScrollArea className="h-[200px] border rounded-md p-2">
        <div className="grid grid-cols-8 gap-1">
          {filteredIcons.map((icon, index) => (
            <button
              key={index}
              className={`w-8 h-8 flex items-center justify-center text-xl hover:bg-muted rounded ${
                currentIcon === icon ? "bg-muted ring-2 ring-primary" : ""
              }`}
              onClick={() => handleIconSelect(icon)}
            >
              {icon}
            </button>
          ))}
        </div>
      </ScrollArea>

      <div className="flex justify-end gap-2">
        <Button variant="outline" size="sm" onClick={onClose}>
          Annuler
        </Button>
        <Button size="sm" onClick={handleApply}>
          Appliquer
        </Button>
      </div>
    </div>
  );
}
